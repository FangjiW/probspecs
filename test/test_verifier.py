# Copyright (c) 2023 David Boetius
# Licensed under the MIT license
import torch

from probspecs import (
    ExternalFunction,
    Probability,
    compose,
    verify,
    ExternalVariable,
)
from probspecs.verifier import VerificationStatus

import pytest


def test_verifier_1(verification_test_nets_1d):
    torch.manual_seed(6982588805995)
    # net1 is a binary classifier for x >= 0
    # net2 is a binary classifier for x >= 1
    # input x is from [-10, 10] with a standard normal distribution
    net1, net2, input_space, distribution = verification_test_nets_1d

    net1_func = ExternalFunction("net1", ("x",))
    net2_func = ExternalFunction("net2", ("x",))
    # probability x >= 0
    prob1 = Probability(net1_func[:, 0] >= net1_func[:, 1])
    # probability x >= 1
    prob2 = Probability(net2_func[:, 0] >= net2_func[:, 1])

    formula = prob1 >= prob2  # True
    verification_status, bounds = verify(
        formula, {"net1": net1, "net2": net2}, {"x": input_space}, {"x": distribution}
    )
    assert verification_status is VerificationStatus.SATISFIED
    assert bounds[prob1][0] >= bounds[prob2][1]  # lb >= ub
    print(bounds)


def test_verifier_2(verification_test_nets_1d):
    torch.manual_seed(6982588305995)
    net1, net2, input_space, distribution = verification_test_nets_1d

    net1_func = ExternalFunction("net1", ("x",))
    net2_func = ExternalFunction("net2", ("x",))
    # P(x >= 0) = 0.5
    prob1 = Probability(net1_func[:, 0] >= net1_func[:, 1])
    # P(x >= 1) = 0.1587 (approx)
    prob2 = Probability(net2_func[:, 0] >= net2_func[:, 1])

    formula = prob2 / prob1 >= 0.35  # False
    verification_status, bounds = verify(
        formula, {"net1": net1, "net2": net2}, {"x": input_space}, {"x": distribution}
    )
    assert verification_status is VerificationStatus.VIOLATED
    print(bounds)


def test_verifier_compose_1(verification_test_compose):
    torch.manual_seed(503668842212395)
    input_space, distribution, generator, consumer = verification_test_compose

    g = ExternalFunction("g", ("x",))
    c = ExternalFunction("c", ("z",))
    cg = compose(c, z=g)
    prob = Probability(cg[:, 0] >= 0.31)
    formula = prob >= 0.5

    verification_status, bounds = verify(
        formula,
        {"g": generator, "c": consumer},
        {"x": input_space},
        {"x": distribution},
    )
    print(verification_status)
    print(bounds)


@pytest.mark.xfail  # ConvTranspose and CROWN
def test_verifier_mnist_1(verification_test_mnist_gen, small_conv_mnist_net):
    gen_input_space, gen_distribution, generator = verification_test_mnist_gen
    classifier = small_conv_mnist_net

    x = ExternalVariable("x")
    g = ExternalFunction("g", ("x",))
    c = ExternalFunction("c", ("z",))
    cg = compose(c, z=g)
    class_two = (
        (cg[:, 2] >= cg[:, 0])
        & (cg[:, 2] >= cg[:, 1])
        & (cg[:, 2] >= cg[:, 3])
        & (cg[:, 2] >= cg[:, 4])
        & (cg[:, 2] >= cg[:, 5])
        & (cg[:, 2] >= cg[:, 6])
        & (cg[:, 2] >= cg[:, 7])
        & (cg[:, 2] >= cg[:, 8])
        & (cg[:, 2] >= cg[:, 9])
    )
    input_space = (
        (x[:, 0, 0, 0] >= -3.0)
        & (x[:, 0, 0, 0] <= 3.0)
        & (x[:, 1, 0, 0] >= -3.0)
        & (x[:, 1, 0, 0] <= 3.0)
        & (x[:, 2, 0, 0] >= -3.0)
        & (x[:, 2, 0, 0] <= 3.0)
        & (x[:, 3, 0, 0] >= -3.0)
        & (x[:, 3, 0, 0] <= 3.0)
    )
    # probability that classifier produces "2" for images generated by the generator
    formula = Probability(class_two, condition=input_space) >= 0.5

    verification_status, bounds = verify(
        formula,
        {"g": generator, "c": classifier},
        {"x": gen_input_space},
        {"x": gen_distribution},
    )
    assert verification_status in (
        VerificationStatus.SATISFIED,
        VerificationStatus.VIOLATED,
    )
    print(bounds)
